<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	backgroundAlpha="1.0"
	currentState="{ model.currentPlayerState }"	
	rollOver="{ showControls = true; }"
	rollOut="showControls = false; dragController.stopDrag(event.stageX, event.stageY);"
	mouseWheel="zoomController.changeZoomLevel(event.delta);"
	mouseDown="dragController.startDrag(event.stageX, event.stageY);"
	mouseMove="dragController.dragDisplay(event.stageX, event.stageY);"
	mouseUp="dragController.stopDrag(event.stageX, event.stageY);"
	xmlns:view="org.opencast.engage.brick.videodisplay.view.*">
	<mx:Script>
		<![CDATA[
			import org.openvideoplayer.display.MediaPlayerSprite;
			import mx.controls.Alert;
			import org.openvideoplayer.media.MediaElement;
			import mx.core.Application;
			import org.opencast.engage.brick.videodisplay.control.DragController;
			import org.opencast.engage.brick.videodisplay.control.ZoomController;
			import org.opencast.engage.brick.videodisplay.control.event.SetVolumeEvent;
			import org.opencast.engage.brick.videodisplay.state.PlayerState;
			import org.opencast.engage.brick.videodisplay.control.event.VideoControlEvent;
			import org.swizframework.Swiz;
			import org.opencast.engage.brick.videodisplay.model.VideodisplayModel;
			
			// size and position of buttons, ...
			[Bindable] 
			private var buttonSizeFactor        : int = 20;
			
			[Bindable]
			private var showControls: Boolean = false;
			
			[Autowire]
			[Bindable]
			public var model:VideodisplayModel;
			
			[Autowire(bean="zoomController")]
			public var zoomController: ZoomController;
			
			[Autowire(bean="dragController")]
			public var dragController: DragController;
			
			private function playPauseClick(evt: MouseEvent): void {
				
				// Videosize:
				// Video(MediaPlayerSprite(model.player.getChildAt(i)).getChildAt(0)).height
								
				if (this.currentState == PlayerState.PLAYING) {
					playPauseButton.styleName = 'Play';
					Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.PAUSE));
				} else {
					playPauseButton.styleName = 'Pause';
					Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.PLAY));				
				} 
				//showControls = true;				
			
			}

		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="{PlayerState.PLAYING}">
			<mx:SetProperty target="{ playPauseButton }"
				name="styleName"
				value="Pause"/>
		</mx:State>
		<mx:State name="{PlayerState.PAUSING}">
			<mx:SetProperty target="{ playPauseButton }"
				name="styleName"
				value="Play"/>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="fadeOut"
			fromState="{PlayerState.PLAYING}"
			toState="{PlayerState.PAUSING}">
			<mx:Parallel target="{curtain}">
				<mx:Fade alphaFrom="0"
					alphaTo="1"
					duration="500"/>
			</mx:Parallel>
		</mx:Transition>
		<mx:Transition id="fadeIn"
			fromState="{PlayerState.PAUSING}"
			toState="{PlayerState.PLAYING}">
			<mx:Parallel target="{curtain}">
				<mx:Fade alphaFrom="1"
					alphaTo="0.0"
					duration="500"/>
			</mx:Parallel>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Canvas id="curtain"
		backgroundColor="#000000"
		backgroundAlpha="0.25"
		width="100%"
		height="100%"
		x="0"
		y="0">
	</mx:Canvas>
	
	<mx:Canvas id="controlBar"
		width="100%"
		bottom="5"
		backgroundColor="#000000"
		backgroundAlpha="0.5" 
		borderColor="#000000"
		borderThickness="5"
		visible="{ showControls || model.currentPlayerState == PlayerState.PAUSING }" >
		<mx:HBox right="25" 
			top="5"
			bottom="5">
		
			<mx:Button id="playPauseButton"
				click="playPauseClick(event);"
				width="{ this.width / buttonSizeFactor }"
				height="{ this.width / buttonSizeFactor }"
				styleName="Play"
				buttonMode="true" 
				toolTip="Start / Stop the video playback" />
				
			<mx:Button id="defaultZoomButton"
				click="zoomController.setZoomLevel(100);"
				width="{ this.width / buttonSizeFactor }"
				height="{ this.width / buttonSizeFactor }"
				styleName="DefaultZoom"
				buttonMode="true" 
				toolTip="Set zoomlevel to 100% (is now at { model.zoomLevel }%)" />
				
			<mx:Button id="zoomOutButton"
				click="zoomController.changeZoomLevel(-5);"
				width="{ this.width / buttonSizeFactor }"
				height="{ this.width / buttonSizeFactor }"
				styleName="ZoomOut"
				buttonMode="true"
				toolTip="Decreases zoomlevel by 5 (is now at { model.zoomLevel }%)" />
				
			<mx:Button id="zoomInButton"
				click="zoomController.changeZoomLevel(5);"
				width="{ this.width / buttonSizeFactor }"
				height="{ this.width / buttonSizeFactor }"
				styleName="ZoomIn"
				buttonMode="true" 
				toolTip="Increases zoomlevel by 5 (is now at { model.zoomLevel }%)"/>
						
		</mx:HBox>
		
	</mx:Canvas>
		
	<!-- Overlay in the upper right corner
		which showes the current position -->
		
	<mx:Canvas id="positionDisplay"
		top="{ this.width / 50 }"
		right="{ this.width / 25 }"
		width="{ this.width / 5 }"
		height="{ this.height / 5 }"
		backgroundColor="#000000"
		backgroundAlpha="0.4"
		borderStyle="outset"
		borderThickness="1"
		visible="{ showControls }"
		styleName="PositionDisplay"
		horizontalScrollPolicy="off"
		verticalScrollPolicy="off" >
		
		<!-- I don't like it ... but it works: -->
		<mx:Canvas id="innerPositionDisplay"
			width="{ positionDisplay.width * 100 / model.zoomLevel }"
			height="{ positionDisplay.height * 100 / model.zoomLevel }"
			left="{ positionDisplay.width * - model.displayPositionX / 
				(Application.application.width * model.zoomLevel / 100) }"
			top="{ positionDisplay.height * - model.displayPositionY / 
				(Application.application.height * model.zoomLevel / 100) }"
			backgroundAlpha="0.45"
			backgroundColor="#ffffff"
			visible="true"
			styleName="InnerPositionDisplay" />
		
	</mx:Canvas>
	
</mx:Canvas>