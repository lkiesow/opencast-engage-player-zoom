<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	backgroundAlpha="1.0"
	currentState="{ model.currentPlayerState }"	
	rollOver="{ model.showControls = true; }"
	rollOut="model.showControls = false; dragController.stopDrag(event.stageX, event.stageY);"
	mouseWheel="zoomController.changeZoomLevel(event.delta, event.localX, event.localY);"
	mouseDown="dragController.startDrag(event.stageX, event.stageY);"
	mouseMove="onMouseMove(event);"
	mouseUp="dragController.stopDrag(event.stageX, event.stageY);"
	xmlns:view="org.opencast.engage.brick.videodisplay.view.*">
	<mx:Script>
		<![CDATA[
			import org.osmf.display.ScaleMode;
			import mx.events.ResizeEvent;
			import mx.controls.VideoDisplay;
			import org.opencast.engage.brick.videodisplay.control.FullScreenController;
			import mx.core.Application;
			import org.opencast.engage.brick.videodisplay.control.DragController;
			import org.opencast.engage.brick.videodisplay.control.ZoomController;
			import org.opencast.engage.brick.videodisplay.control.event.SetVolumeEvent;
			import org.opencast.engage.brick.videodisplay.state.PlayerState;
			import org.opencast.engage.brick.videodisplay.control.event.VideoControlEvent;
			import org.swizframework.Swiz;
			import org.opencast.engage.brick.videodisplay.model.VideodisplayModel;
			import org.opencast.engage.brick.videodisplay.control.util.TimeCode;
			
			// size and position of buttons, ...
			[Bindable] 
			private var buttonSizeFactor        : int = 20;
			
			[Autowire]
			[Bindable]
			public var model:VideodisplayModel;
			
			[Autowire(bean="zoomController")]
			public var zoomController: ZoomController;
			
			[Autowire(bean="dragController")]
			public var dragController: DragController;
			
			[Autowire(bean="fullScreenController")]
			public var fullScreenController: FullScreenController;
			
			private function onMouseMove(event: MouseEvent): void {
				
				dragController.dragDisplay(event.stageX, event.stageY);
				
				model.showControls = true;
				if (Application.application.stage.displayState == StageDisplayState.FULL_SCREEN) {
					model.controlHideTimer.reset();
					model.controlHideTimer.start();
				}
				
			}
			
			private function playPauseClick(evt: MouseEvent): void {
												
				if (this.currentState == PlayerState.PLAYING) {
					playPauseButton.styleName = 'Play';
					Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.PAUSE));
				} else {
					playPauseButton.styleName = 'Pause';
					Swiz.dispatchEvent( new VideoControlEvent(VideoControlEvent.PLAY));	
				} 			
			
			}

		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="{PlayerState.PLAYING}">
			<mx:SetProperty target="{ playPauseButton }"
				name="styleName"
				value="Pause"/>
		</mx:State>
		<mx:State name="{PlayerState.PAUSING}">
			<mx:SetProperty target="{ playPauseButton }"
				name="styleName"
				value="Play"/>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="fadeOut"
			fromState="{PlayerState.PLAYING}"
			toState="{PlayerState.PAUSING}">
			<mx:Parallel target="{curtain}">
				<mx:Fade alphaFrom="0"
					alphaTo="1"
					duration="500"/>
			</mx:Parallel>
		</mx:Transition>
		<mx:Transition id="fadeIn"
			fromState="{PlayerState.PAUSING}"
			toState="{PlayerState.PLAYING}">
			<mx:Parallel target="{curtain}">
				<mx:Fade alphaFrom="1"
					alphaTo="0.0"
					duration="500"/>
			</mx:Parallel>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Canvas id="curtain"
		backgroundColor="#000000"
		backgroundAlpha="0.25"
		width="100%"
		height="100%"
		x="0"
		y="0">
	</mx:Canvas>
	

		
	<mx:HBox id="controlBar"
		width="100%"
		height="{ Math.sqrt(this.height) * 2 }"
		bottom="5"
		backgroundColor="#000000"
		backgroundAlpha="0.5" 
		borderColor="#000000"
		verticalAlign="middle"
		horizontalAlign="center"
		visible="{ model.showControls || model.currentPlayerState == PlayerState.PAUSING }"
		horizontalScrollPolicy="off"
		verticalScrollPolicy="off"
		horizontalGap="20" 
		paddingLeft="25" 
		paddingRight="25" >
		
			<mx:Canvas id="fullscreenScrubber" 
				left="25"
				height="{ controlBar.height * 0.6 }"
				width="100%"
				backgroundColor="#000000"
				backgroundAlpha="0.0"
				borderColor="silver"
				borderThickness="1"
				borderStyle="solid"
				horizontalScrollPolicy="off"
				verticalScrollPolicy="off"
				visible="{ Application.application.stage.displayState == StageDisplayState.FULL_SCREEN }"
				mouseDown="{ model.player.seek(model.currentDuration 
					* (fullscreenScrubber.globalToLocal(new Point(event.stageX, event.stageY)).x / fullscreenScrubber.width)); }"
				mouseMove="{ if (event.buttonDown) 
						model.player.seek(model.currentDuration 
						* (fullscreenScrubber.globalToLocal(new Point(event.stageX, event.stageY)).x / fullscreenScrubber.width)); }" >
					
				<!-- Shows download progress -->	
				<mx:Canvas
					left="0"
					top="0"
					bottom="0"
					width="{ model.loadingProgress * fullscreenScrubber.width }" 
					backgroundColor="#000000"
					backgroundAlpha="0.5"
					horizontalScrollPolicy="off"
					verticalScrollPolicy="off" />
					
				<!-- Shows current videoposition -->		
				<mx:Canvas
					left="0"
					top="0"
					bottom="0"
					width="{ model.currentPlayhead / model.currentDuration * fullscreenScrubber.width }" 
					backgroundColor="#FFFFFF"
					backgroundAlpha="0.75"
					horizontalScrollPolicy="off"
					verticalScrollPolicy="off" />
				
				<mx:Label id="timeLabel" 
					text="{ (new TimeCode).getTC(model.currentPlayhead) + ' / '
					+ (new TimeCode).getTC(model.currentDuration) }"
					top="{ (fullscreenScrubber.height - timeLabel.height) / 2 }"
					left="{ (fullscreenScrubber.width - timeLabel.width) / 2 }"
					fontWeight="bold"
					fontSize="{ Math.sqrt(this.height) / 2 }"
					color="#777777"
					mouseDown="{  }" />
				
			
			</mx:Canvas>
					
			<mx:HBox id="buttonContainer"
				right="25" 
				height="{ controlBar.height * 0.8 }"
				verticalAlign="middle">
			
				<mx:Button id="playPauseButton"
					click="playPauseClick(event);"
					height="{ buttonContainer.height }"
					width="{ playPauseButton.height }"
					styleName="Play"
					buttonMode="true" 
					toolTip="Start / Stop the video playback" />
					
				<mx:Button id="defaultZoomButton"
					click="zoomController.setZoomLevel(100);"
					height="{ buttonContainer.height }"
					width="{ defaultZoomButton.height }"
					styleName="DefaultZoom"
					buttonMode="true" 
					toolTip="Fit video in window" />
					
				<mx:Button id="videoSizeZoomButton"
					click="zoomController.setZoomLevel(
						Math.max(model.video.videoWidth * 100 / Application.application.width,
							model.video.videoHeight * 100 / Application.application.height));"
					height="{ buttonContainer.height }"
					width="{ videoSizeZoomButton.height }"
					styleName="VideoSizeZoom"
					buttonMode="true" 
					toolTip="Zoom to native video size" />
					
				<mx:Button id="zoomOutButton"
					click="zoomController.changeZoomLevel(-5);"
					height="{ buttonContainer.height }"
					width="{ zoomOutButton.height }"
					styleName="ZoomOut"
					buttonMode="true"
					toolTip="Decreases zoomlevel" />
					
				<mx:Button id="zoomInButton"
					click="zoomController.changeZoomLevel(5);"
					height="{ buttonContainer.height }"
					width="{ zoomInButton.height }"
					styleName="ZoomIn"
					buttonMode="true" 
					toolTip="Increases zoomlevel"/>
					
				<mx:Button id="fullScreenButton"
					click="{ fullScreenController.toggleFullScreen(); }"
					height="{ buttonContainer.height }"
					width="{ fullScreenButton.height }"
					styleName="FullScreen"
					buttonMode="true" 
					toolTip="Toggle fullscreen mode"/>
											
			</mx:HBox>
				
		</mx:HBox>
		
		
	<!-- Overlay in the upper right corner
		which showes the current position -->
		
	<mx:Canvas id="positionDisplay"
		top="{ Math.sqrt(this.height) }"
		right="{ Math.sqrt(this.height) }"
		width="{ this.width / 5 }"
		height="{ this.height / 5 }"
		backgroundColor="#000000"
		backgroundAlpha="0.4"
		borderStyle="solid"
		borderThickness="1"
		visible="{ !( (!model.showControls) || (model.zoomLevel == 100) ) }"
		styleName="PositionDisplay"
		horizontalScrollPolicy="off"
		verticalScrollPolicy="off" >
		
		<!-- I don't like it ... but it works: -->
		<mx:Canvas id="innerPositionDisplay"
			width="{ positionDisplay.width * 100 / model.zoomLevel }"
			height="{ positionDisplay.height * 100 / model.zoomLevel }"
			left="{ positionDisplay.width * - model.displayPositionX / 
				(Application.application.width * model.zoomLevel / 100) }"
			top="{ positionDisplay.height * - model.displayPositionY / 
				(Application.application.height * model.zoomLevel / 100) }"
			backgroundAlpha="0.45"
			backgroundColor="#ffffff"
			visible="true"
			styleName="InnerPositionDisplay" />
		
	</mx:Canvas>
	
</mx:Canvas>